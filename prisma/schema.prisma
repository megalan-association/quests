// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             Int       @id @default(autoincrement())
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    societies      Society[] // 1 user can join 0 to many socieites
    type           UserType  @default(PARTICIPANT)
    completedTasks Task[] // 1 user can completed 0 to many socieites
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Room {
    id        Int       @id @default(autoincrement())
    name      String
    image     String?
    societies Society[] // 1 room can have 0 to many socieites
}

model Society {
    id        Int     @id @default(autoincrement())
    name      String
    image     String?
    joinToken String  @unique
    users     User[] // 1 society can have 0 to many admins
    tasks     Task[] // 1 society can have 0 to many tasks
    Room      Room    @relation(fields: [roomId], references: [id])
    roomId    Int // 1 society can only be in 1 room
}

model Task {
    id          Int       @id @default(autoincrement())
    name        String
    description String
    points      Int       @default(100)
    activated   Boolean   @default(false)
    societies   Society[] // 1 task can be hosted by 0 to many soceities
    userId      Int // 1 task can be created by 1 user
    User        User      @relation(fields: [userId], references: [id])
}

enum UserType {
    PARTICIPANT
    ADMIN
}
